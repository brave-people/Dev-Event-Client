[{"/Users/cindy/Desktop/2.Lab/Dev-Event-Client/src/store.ts":"1","/Users/cindy/Desktop/2.Lab/Dev-Event-Client/src/pages/Home.tsx":"2","/Users/cindy/Desktop/2.Lab/Dev-Event-Client/src/slices/month.ts":"3","/Users/cindy/Desktop/2.Lab/Dev-Event-Client/src/index.tsx":"4","/Users/cindy/Desktop/2.Lab/Dev-Event-Client/src/components/Splash.tsx":"5","/Users/cindy/Desktop/2.Lab/Dev-Event-Client/src/slices/filter.ts":"6","/Users/cindy/Desktop/2.Lab/Dev-Event-Client/src/components/Navigation.tsx":"7","/Users/cindy/Desktop/2.Lab/Dev-Event-Client/src/pages/Education.tsx":"8","/Users/cindy/Desktop/2.Lab/Dev-Event-Client/src/slices/textCard.ts":"9","/Users/cindy/Desktop/2.Lab/Dev-Event-Client/src/components/Filter.tsx":"10","/Users/cindy/Desktop/2.Lab/Dev-Event-Client/src/components/TextCard.tsx":"11"},{"size":565,"mtime":1607304806468,"results":"12","hashOfConfig":"13"},{"size":988,"mtime":1609982869190,"results":"14","hashOfConfig":"13"},{"size":424,"mtime":1609982869191,"results":"15","hashOfConfig":"13"},{"size":450,"mtime":1607304806464,"results":"16","hashOfConfig":"13"},{"size":1068,"mtime":1609982869187,"results":"17","hashOfConfig":"13"},{"size":711,"mtime":1607304806467,"results":"18","hashOfConfig":"13"},{"size":3491,"mtime":1609982869186,"results":"19","hashOfConfig":"13"},{"size":1551,"mtime":1608597522985,"results":"20","hashOfConfig":"13"},{"size":323,"mtime":1608597522986,"results":"21","hashOfConfig":"13"},{"size":1598,"mtime":1609982869186,"results":"22","hashOfConfig":"13"},{"size":1169,"mtime":1608597522983,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"npnrnc",{"filePath":"27","messages":"28","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"26"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"34"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/cindy/Desktop/2.Lab/Dev-Event-Client/src/store.ts",[],["51","52"],"/Users/cindy/Desktop/2.Lab/Dev-Event-Client/src/pages/Home.tsx",["53","54"],"import React from \"react\";\nimport Card from '../components/Card'\nimport Filter from \"../components/Filter\";\nimport ScrollElement from \"../components/ScrollElement\";\nimport { useSelector } from \"react-redux\";\nimport { ReducerType } from \"../rootReducer\";\nimport { MonthModel } from \"../models/month\";\nimport CardData from '../models/data.json';\n\nfunction Home() {\n  const { date } = useSelector<ReducerType>(state => state.month) as MonthModel;\n\n  const filterCardData = CardData.filter(card => {\n    if (card.startDate.indexOf(date) !== -1) {\n      return card.startDate.split('.')[1];\n    }\n  })\n\n  return (\n    <div>\n      <h2 className={'title'}>2020 EVENT</h2>\n      {/*<ScrollElement />*/ }\n      <Filter/>\n      {/*<div className={'landing__wrap'}>\n        <h1 className={'landing__title'}>DEV EVENT</h1>\n        <p>개발자 컨퍼런스 및 해커톤 일정을 알려드립니다</p>\n      </div>*/ }\n      <Card cards={ filterCardData }/>\n    </div>\n  );\n}\n\nexport default Home;\n","/Users/cindy/Desktop/2.Lab/Dev-Event-Client/src/slices/month.ts",[],"/Users/cindy/Desktop/2.Lab/Dev-Event-Client/src/index.tsx",[],["55","56"],"/Users/cindy/Desktop/2.Lab/Dev-Event-Client/src/components/Splash.tsx",["57"],"import React from \"react\";\n\nfunction Filter() {\n  setTimeout(() => {\n    const splash = document.querySelector('.splash__wrap') as HTMLElement;\n    const splashHello = document.querySelector('.splash__hello') as HTMLElement;\n    splash.style.top = '-200%';\n    splashHello.style.top = '-200%';\n  }, 3000)\n\n  return (\n    <div className={'splash__wrap'}>\n      <div className={'splash__hello'}>\n        <img src=\"https://s3.ap-northeast-2.amazonaws.com/cdn.cindy.com/dev-event/brave_logo.png\" />\n      </div>\n      <div className={'splash__circle--00'}></div>\n      <svg id=\"spinner\" data-name=\"layer_1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 446 446\">\n        <path className=\"cls-1\" d=\"M445,223A221.83,221.83,0,0,0,223,1V223Z\"/>\n        <path\n          style={{ fill: '#C7E7EB' }}\n          d=\"M309.41,18.45A221.83,221.83,0,0,1,445,223h1C446,99.84,346.16,0,223,0V1A220.54,220.54,0,0,1,309.41,18.45Z\"/>\n      </svg>\n      <div className={'splash__circle--01'}></div>\n      <div className={'splash__circle--02'}></div>\n    </div>\n  )\n}\n\nexport default Filter;\n","/Users/cindy/Desktop/2.Lab/Dev-Event-Client/src/slices/filter.ts",[],"/Users/cindy/Desktop/2.Lab/Dev-Event-Client/src/components/Navigation.tsx",["58"],"import React, { useState } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { ReducerType } from \"../rootReducer\";\nimport { setShowMonth, activeMonth } from \"../slices/month\";\nimport { MonthModel } from \"../models/month\";\nimport { current } from \"@reduxjs/toolkit\";\n\nconst classNames = require('classnames');\n\ntype NavigationProps = {\n  list: string[];\n};\n\nfunction Navigation(props: NavigationProps) {\n  const { date } = useSelector<ReducerType>(state => state.month) as MonthModel;\n  const dispatch = useDispatch();\n  let [show, showMonth] = useState(false);\n  const startDate = new Date('2020-09-01');\n  const monthArr: string[] = []\n  const disableDate = ['2020.09', '2020.10', '2020.11', '2021.02'];\n  for (let i = startDate.getMonth() + 1; i <= 12; i++) {\n    monthArr.push(`${ startDate.getFullYear() }.${ i < 10 ? '0' + i : i }`)\n  }\n  monthArr.push('2021.01');\n  monthArr.push('2021.02');\n\n  // 최초 날짜 설정\n  const addZero = Number(new Date().getMonth() + 1) < 10 ? '0' : '';\n  if (!date) {\n    const currentDate = `${ new Date().getFullYear() }.${ addZero }${ Number(new Date().getMonth() + 1) }`\n    setCurrentMonth(currentDate);\n  }\n\n  function clickShowMonth() {\n    showMonth(!show);\n    dispatch(setShowMonth(!show));\n  }\n\n  function setCurrentMonth(date) {\n    // currentDate =`${new Date().getFullYear()}-${Number(new Date().getMonth() + 1)}`;\n    // setActiveMonth(date);\n    if (!disableDate.includes(date)) {\n      dispatch(activeMonth(date))\n    }\n  }\n\n  /*document.addEventListener('click', e => {\n    const target = e.target as HTMLTextAreaElement;\n    if (!target.parentElement!.id.includes('nav') && showMonth) {\n      showMonth(false);\n      dispatch(setShowMonth(false));\n    }\n  })*/\n\n  // style\n  const monthClasses = (el) => classNames({\n    'nav--month__text': true,\n    'nav--month__text--active': date === el && !disableDate.includes(el),\n    'nav--month__text--disable': disableDate.includes(el)\n  })\n\n  return (\n    <nav className={ 'nav' }>\n      <div id={ 'nav' } className={ 'nav__box' } onClick={ () => clickShowMonth() }>\n        <span>{ date.split('.')[1] }월</span>\n      </div>\n      <NavLink to=\"/Dev-Event-Client\" exact={ true } activeClassName={ 'nav__text--active' } className={ 'nav__text' }>\n        EVENT\n      </NavLink>\n      <NavLink to='/Dev-Event-Client/education' exact={ true } activeClassName={ 'nav__text--active' }\n               className={ 'nav__text' }>\n        Edu\n      </NavLink>\n      <p className={ 'nav__text' }>Meet</p>\n      <p className={ 'nav__text' }>Circles</p>\n      <div className={ show ? 'nav--month__box nav--month__box--active' : 'nav--month__box' } id={ 'nav--month' }>\n        <div className={ 'nav--month' }>\n          <div className={ 'nav--month__title' }>\n            <h3>Calendar</h3>\n            <p>{ `${ addZero }${new Date().getMonth() + 1} ${ new Date().getFullYear() }` }</p>\n          </div>\n          <div className={ 'nav--month__text__box' }>\n            { monthArr.map((el, index) => {\n              return (\n                <div key={ index }\n                     className={ monthClasses(el) }\n                     onClick={ () => setCurrentMonth(el) }\n                >\n                  <p>{ el.split('.')[0] }</p>\n                  <p>{ el.split('.')[1] }</p>\n                </div>\n              )\n            }) }\n          </div>\n        </div>\n      </div>\n    </nav>\n  )\n}\n\nexport default Navigation;\n","/Users/cindy/Desktop/2.Lab/Dev-Event-Client/src/pages/Education.tsx",[],"/Users/cindy/Desktop/2.Lab/Dev-Event-Client/src/slices/textCard.ts",[],"/Users/cindy/Desktop/2.Lab/Dev-Event-Client/src/components/Filter.tsx",[],"/Users/cindy/Desktop/2.Lab/Dev-Event-Client/src/components/TextCard.tsx",[],{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","severity":1,"message":"64","line":4,"column":8,"nodeType":"65","messageId":"66","endLine":4,"endColumn":21},{"ruleId":"67","severity":1,"message":"68","line":13,"column":47,"nodeType":"69","messageId":"70","endLine":13,"endColumn":49},{"ruleId":"59","replacedBy":"71"},{"ruleId":"61","replacedBy":"72"},{"ruleId":"73","severity":1,"message":"74","line":14,"column":9,"nodeType":"75","endLine":14,"endColumn":101},{"ruleId":"63","severity":1,"message":"76","line":7,"column":10,"nodeType":"65","messageId":"66","endLine":7,"endColumn":17},"no-native-reassign",["77"],"no-negated-in-lhs",["78"],"@typescript-eslint/no-unused-vars","'ScrollElement' is defined but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd",["77"],["78"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'current' is defined but never used.","no-global-assign","no-unsafe-negation"]